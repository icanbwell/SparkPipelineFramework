:py:mod:`spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader`
============================================================================================

.. py:module:: spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader.FrameworkCsvLoader




.. py:class:: FrameworkCsvLoader(view: str, filepath: Union[str, List[str], pathlib.Path], delimiter: str = ',', has_header: bool = True, clean_column_names: bool = False, multiline: bool = False, name: Optional[str] = None, parameters: Optional[Dict[str, Any]] = None, progress_logger: Optional[spark_pipeline_framework.progress_logger.progress_logger.ProgressLogger] = None, limit: int = -1, infer_schema: bool = False, cache_table: bool = True, schema: Optional[pyspark.sql.types.StructType] = None, create_file_path: bool = False, mapping_file_name: Optional[str] = None)

   Bases: :py:obj:`spark_pipeline_framework.transformers.framework_local_file_loader.v1.framework_local_file_loader.FrameworkLocalFileLoader`

   Abstract class for transformers that transform one dataset into another.

   .. versionadded:: 1.3.0

   .. py:method:: getDelimiter(self) -> str


   .. py:method:: getHasHeader(self) -> bool


   .. py:method:: getMultiline(self) -> bool


   .. py:method:: getReaderFormat(self) -> str


   .. py:method:: getReaderOptions(self) -> Dict[str, Any]



