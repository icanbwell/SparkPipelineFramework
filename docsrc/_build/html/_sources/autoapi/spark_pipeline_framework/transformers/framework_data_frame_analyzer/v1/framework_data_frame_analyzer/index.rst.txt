:py:mod:`spark_pipeline_framework.transformers.framework_data_frame_analyzer.v1.framework_data_frame_analyzer`
==============================================================================================================

.. py:module:: spark_pipeline_framework.transformers.framework_data_frame_analyzer.v1.framework_data_frame_analyzer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.transformers.framework_data_frame_analyzer.v1.framework_data_frame_analyzer.FrameworkDataFrameAnalyzer




.. py:class:: FrameworkDataFrameAnalyzer(view: str, analysis_views_prefix: Optional[str] = None, output_folder: Optional[Union[pathlib.Path, str]] = None, columns_to_analyze: Optional[List[str]] = None, columns_to_skip: Optional[List[str]] = None, name: Optional[str] = None, parameters: Optional[Dict[str, Any]] = None, progress_logger: Optional[spark_pipeline_framework.progress_logger.progress_logger.ProgressLogger] = None)

   Bases: :py:obj:`spark_pipeline_framework.transformers.framework_transformer.v1.framework_transformer.FrameworkTransformer`

   Abstract class for transformers that transform one dataset into another.

   .. versionadded:: 1.3.0

   .. py:method:: _transform(self, df: pyspark.sql.dataframe.DataFrame) -> pyspark.sql.dataframe.DataFrame

      Transforms the input dataset.

      Parameters
      ----------
      dataset : :py:class:`pyspark.sql.DataFrame`
          input dataset.

      Returns
      -------
      :py:class:`pyspark.sql.DataFrame`
          transformed dataset


   .. py:method:: getView(self) -> str


   .. py:method:: getAnalysisViewsPrefix(self) -> Optional[str]


   .. py:method:: getOutputFolder(self) -> Optional[Union[pathlib.Path, str]]


   .. py:method:: getColumnsToAnalyze(self) -> Optional[List[str]]


   .. py:method:: getColumnsToSkip(self) -> Optional[List[str]]



