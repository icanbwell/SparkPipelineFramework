:py:mod:`spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter`
==================================================================================================

.. py:module:: spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter.FrameworkBaseExporter




.. py:class:: FrameworkBaseExporter(view: Optional[str] = None, name: Optional[str] = None, mode: str = MODE_ERROR, parameters: Optional[Dict[str, Any]] = None, progress_logger: Optional[spark_pipeline_framework.progress_logger.progress_logger.ProgressLogger] = None, limit: int = -1)

   Bases: :py:obj:`spark_pipeline_framework.transformers.framework_transformer.v1.framework_transformer.FrameworkTransformer`

   Abstract class for transformers that transform one dataset into another.

   .. versionadded:: 1.3.0

   .. py:attribute:: MODE_APPEND
      :annotation: = append

      

   .. py:attribute:: MODE_OVERWRITE
      :annotation: = overwrite

      

   .. py:attribute:: MODE_IGNORE
      :annotation: = ignore

      

   .. py:attribute:: MODE_ERROR
      :annotation: = error

      

   .. py:attribute:: MODE_CHOICES
      

      

   .. py:method:: _transform(self, df: pyspark.sql.dataframe.DataFrame) -> pyspark.sql.dataframe.DataFrame

      Transforms the input dataset.

      Parameters
      ----------
      dataset : :py:class:`pyspark.sql.DataFrame`
          input dataset.

      Returns
      -------
      :py:class:`pyspark.sql.DataFrame`
          transformed dataset


   .. py:method:: getView(self) -> str


   .. py:method:: getMode(self) -> str


   .. py:method:: getLimit(self) -> int


   .. py:method:: getFormat(self) -> str
      :abstractmethod:


   .. py:method:: getOptions(self) -> Dict[str, Any]
      :abstractmethod:



