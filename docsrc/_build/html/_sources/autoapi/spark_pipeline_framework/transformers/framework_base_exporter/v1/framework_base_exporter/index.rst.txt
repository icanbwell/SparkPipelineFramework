:mod:`spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter`
===============================================================================================

.. py:module:: spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter.FrameworkBaseExporter



.. class:: FrameworkBaseExporter(view: Optional[str] = None, name: Optional[str] = None, mode: str = MODE_ERROR, parameters: Optional[Dict[str, Any]] = None, progress_logger: Optional[ProgressLogger] = None, limit: int = -1)


   Bases: :class:`spark_pipeline_framework.transformers.framework_transformer.v1.framework_transformer.FrameworkTransformer`

   Abstract class for transformers that transform one dataset into another.

   .. versionadded:: 1.3.0

   .. attribute:: MODE_APPEND
      :annotation: = append

      

   .. attribute:: MODE_OVERWRITE
      :annotation: = overwrite

      

   .. attribute:: MODE_IGNORE
      :annotation: = ignore

      

   .. attribute:: MODE_ERROR
      :annotation: = error

      

   .. attribute:: MODE_CHOICES
      

      

   .. method:: setParams(self, view: Optional[str] = None, name: Optional[str] = None, mode: str = MODE_ERROR, parameters: Optional[Dict[str, Any]] = None, progress_logger: Optional[ProgressLogger] = None, limit: int = -1) -> None


   .. method:: _transform(self, df: pyspark.sql.dataframe.DataFrame) -> pyspark.sql.dataframe.DataFrame

      Transforms the input dataset.

      :param dataset: input dataset, which is an instance of :py:class:`pyspark.sql.DataFrame`
      :returns: transformed dataset


   .. method:: setView(self, value: pyspark.ml.param.Param) -> spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter.FrameworkBaseExporter


   .. method:: getView(self) -> str


   .. method:: setMode(self, value: pyspark.ml.param.Param) -> spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter.FrameworkBaseExporter


   .. method:: getMode(self) -> str


   .. method:: setLimit(self, value: pyspark.ml.param.Param) -> spark_pipeline_framework.transformers.framework_base_exporter.v1.framework_base_exporter.FrameworkBaseExporter


   .. method:: getLimit(self) -> int


   .. method:: getFormat(self) -> str
      :abstractmethod:


   .. method:: getOptions(self) -> Dict[(str, Any)]
      :abstractmethod:



