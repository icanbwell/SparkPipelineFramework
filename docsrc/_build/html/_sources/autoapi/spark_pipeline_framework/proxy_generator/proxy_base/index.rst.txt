:mod:`spark_pipeline_framework.proxy_generator.proxy_base`
==========================================================

.. py:module:: spark_pipeline_framework.proxy_generator.proxy_base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.proxy_generator.proxy_base.ProxyBase



.. class:: ProxyBase(parameters: Dict[(str, Any)], location: Union[(str, Path)], progress_logger: Optional[ProgressLogger] = None, verify_count_remains_same: bool = False)


   Bases: :class:`spark_pipeline_framework.transformers.framework_transformer.v1.framework_transformer.FrameworkTransformer`

   Abstract class for transformers that transform one dataset into another.

   .. versionadded:: 1.3.0

   .. method:: read_file_as_string(file_path: str) -> str
      :staticmethod:


   .. method:: transformers(self) -> List[Transformer]
      :property:


   .. method:: _transform(self, df: pyspark.sql.DataFrame) -> pyspark.sql.DataFrame

      Transforms the input dataset.

      :param dataset: input dataset, which is an instance of :py:class:`pyspark.sql.DataFrame`
      :returns: transformed dataset


   .. method:: fit(self, df: pyspark.sql.DataFrame) -> pyspark.ml.base.Transformer


   .. method:: get_python_transformer(self, import_module_name: str) -> pyspark.ml.base.Transformer


   .. method:: get_python_mapping_transformer(self, import_module_name: str) -> pyspark.ml.base.Transformer



