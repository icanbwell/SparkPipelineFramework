:py:mod:`spark_pipeline_framework.progress_logger.progress_logger`
==================================================================

.. py:module:: spark_pipeline_framework.progress_logger.progress_logger


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.progress_logger.progress_logger.ProgressLogger




.. py:class:: ProgressLogger(event_loggers: Optional[List[spark_pipeline_framework.event_loggers.event_logger.EventLogger]] = None)

   .. py:method:: __enter__(self) -> ProgressLogger


   .. py:method:: __exit__(self, exc_type: Optional[BaseException], exc_value: Optional[BaseException], traceback: Optional[types.TracebackType]) -> None


   .. py:method:: log_metric(self, name: str, time_diff_in_minutes: float) -> None


   .. py:method:: log_artifact(self, key: str, contents: str, folder_path: Optional[str] = None) -> None


   .. py:method:: write_to_log(self, name: str, message: str = '') -> bool


   .. py:method:: log_exception(self, event_name: str, event_text: str, ex: Exception) -> None


   .. py:method:: log_progress_event(self, event_name: str, current: int, total: int, event_format_string: str, backoff: bool = True) -> None


   .. py:method:: log_event(self, event_name: str, event_text: str) -> None



