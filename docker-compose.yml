version: '3.5'
services:
  dev:
    depends_on:
      - fhir
      - warehouse
      - elasticsearch
    user: root
    build:
      dockerfile: spark.Dockerfile
      context: .
    environment:
        # These environment variables put the python interpreter into debug mode
#        PYTHONDEVMODE: 1
#        PYTHONMALLOC: debug
        PYTHONASYNCIODEBUG: 1
#        PYTHONTRACEMALLOC: 1
        # These environment variables are used to configure the spark pipeline framework
        FHIR_SERVER_URL: 'http://fhir:3000/4_0_0/'
        AUTH_CONFIGURATION_URI: 'http://keycloak:8080/realms/bwell-realm/.well-known/openid-configuration'
        FHIR_CLIENT_ID: bwell-client-id
        FHIR_CLIENT_SECRET: bwell-secret
        ELASTICSEARCH_HOST: https://elasticsearch:9200
    volumes:
      - ./:/SparkpipelineFramework/
#      - ~/.local/share/virtualenvs:/root/.local/share/virtualenvs:rw
#      - ../helix.fhir.client.sdk/helix_fhir_client_sdk:/usr/local/lib/python3.10/dist-packages/helix_fhir_client_sdk
#      - ../mockserver_client/mockserver_client:/usr/local/lib/python3.10/dist-packages/mockserver_client
    container_name: spf_dev
    working_dir: /SparkpipelineFramework

  warehouse:
    image: mariadb:10.11.9
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: fhir_rpt
    ports:
      - '33061:3306'
    command: --sql-mode="STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]

  mlflow:
    image: imranq2/mlflow_server:0.2.0
    depends_on:
      - warehouse
    ports:
      - '5050:5000'
    volumes:
      - ./mlflow_artifacts/:/opt/project/mlflow_artifacts/
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri mysql+pymysql://root:root_password@warehouse:3306/fhir_rpt --default-artifact-root ./opt/project/mlflow_artifacts

  mock-server:
    image: mockserver/mockserver:mockserver-5.15.0
    command: -serverPort 1080
    ports:
      - '1080:1080'
    environment:
      - MOCKSERVER_LIVENESS_HTTP_GET_PATH=/health

  fhir:
    depends_on:
      - mongo
      - keycloak
    image: imranq2/node-fhir-server-mongo:5.3.16
    # To use local fhir code, comment above line and uncomment below
#    build:
#      dockerfile: Dockerfile
#      context: ../fhir-server
#      args:
#        NODE_ENV: development
    environment:
      NODE_ENV: 'development'
      ENV: local
      SERVER_PORT: 3000
      MONGO_DB_NAME: fhir
      MONGO_URL: mongodb://mongo:27017
      AUDIT_EVENT_MONGO_DB_NAME: fhir
      AUDIT_EVENT_MONGO_URL: mongodb://mongo:27017
      RESOURCE_SERVER: http://fhir:3000/
#      AUTH_SERVER_URI: http://mock-server:1080
      AUTH_CONFIGURATION_URI: 'http://keycloak:8080/realms/bwell-realm/.well-known/openid-configuration'
      AUTH_JWKS_URL: 'http://keycloak:8080/realms/bwell-realm/protocol/openid-connect/certs'
      EXTERNAL_AUTH_JWKS_URLS: 'http://keycloak:8080/realms/bwell-realm/protocol/openid-connect/certs'
      AUTH_CUSTOM_GROUP: "cognito:groups"
      AUTH_CUSTOM_SCOPE: "custom:scope"
      # service account used to connect to OAuth IDP
      CLIENT_ID: bwell-client-id
      CLIENT_SECRET: bwell-secret
#      INTROSPECTION_URL: http://mock-server:1080/introspect
      CHECK_ACCESS_TAG_ON_SAVE: 1
      IS_PRODUCTION: ""
      RETURN_BUNDLE: "1"
      VALIDATE_SCHEMA: "1"
      AUTH_ENABLED: "1"
      ENABLE_GRAPHQL: "1"
      ENABLE_GRAPHQLV2: "1"
      ENABLE_GRAPHQL_PLAYGROUND: '1'
      LOGLEVEL: "DEBUG"
      SET_INDEX_HINTS: 0
      CREATE_INDEX_ON_COLLECTION_CREATION: 1
      USE_TWO_STEP_SEARCH_OPTIMIZATION: "0"
      STREAM_RESPONSE: "1"
      LOG_STREAM_STEPS: "0"
      PARTITION_RESOURCES: 'AuditEvent'
      COLLECTIONS_ACCESS_INDEX: "all"
      USE_ACCESS_INDEX: 1
      ENABLE_PATIENT_FILTERING: "1"
      ACCESS_TAGS_INDEXED: "medstar,Thedacare,bwell"
      ENABLE_GLOBAL_ID: 1
      NODE_OPTIONS: --max-old-space-size=20240
    ports:
      - '3000:3000'
    command: yarn start
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail localhost:3000/health || exit 1"]

  mongo:
    image: mongo:5.0.28
    ports:
      - '27017:27017'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet

  elasticsearch:
#    image: bitnami/elasticsearch:7.9.3  # AWS ElasticSearch supports upto 7.9
    # using OpenDistro for best compatibility with AWS Managed ElasticSearch:
    # https://opendistro.github.io/for-elasticsearch/downloads.html
    image: opensearchproject/opensearch:1.3.18
    container_name: elasticsearch
    environment:
      - cluster.name=odfe-cluster
      - node.name=elasticsearch
      - discovery.type=single-node
#      - cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - network.host=0.0.0.0 # required if not using the demo security configuration
#      - opendistro_security.disabled=true
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the Elasticsearch user, set to at least 65536 on modern systems
        hard: 65536
    ports:
      - '9200:9200'
      - '9600:9600' # required for Performance Analyzer
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail https://admin:admin@localhost:9200/_cluster/health --insecure || exit 1"]

  keycloak:
    # https://github.com/keycloak/keycloak/releases
    image: quay.io/keycloak/keycloak:25.0.1
#    container_name: keycloak
#    build:
#      dockerfile: keycloak.Dockerfile
#      context: .
#    depends_on:
#      - postgres
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
#      KC_DB: postgres
#      KC_DB_URL: jdbc:postgresql://postgres/pdb
#      KC_DB_USERNAME: admin
#      KC_DB_PASSWORD: admin
      # The below settings are for test data creation
      # This is the user and password that will be created in the realm
      MY_ADMIN_USER_NAME: admin
      MY_ADMIN_USER_PASSWORD: password
      MY_ADMIN_USER_SCOPE: user/*.* access/*.*
      MY_ADMIN_USER_GROUPS: user/*.* access/*.*
      MY_ADMIN_USER_TOKEN_USERNAME: admin
      # This is the user and password that will be created in the realm
      MY_USER_NAME: tester
      MY_USER_PASSWORD: password
      # These groups get specified as scopes in the token
      MY_USER_GROUPS: user/*.*,access/*.* launch/patient,patient/*.read
      MY_USER_SCOPE: user/*.* access/*.* launch/patient patient/*.read
      MY_USER_TOKEN_USERNAME: tester
      # This is the client setup
      CLIENT_ID: bwell-client-id
      CLIENT_SECRET: bwell-secret
      # This is the service account that will be created in the realm
      SERVICE_ACCOUNT_NAME: service-account
      SERVICE_ACCOUNT_SCOPE: user/*.* access/*.*
      SERVICE_ACCOUNT_GROUPS: user/*.* access/*.*
      # These are the custom claims that will be added to any generated token
      MY_USER_CLIENT_PERSON_ID: 0b2ad38a-20bc-5cf5-9739-13f242b05892
      MY_USER_CLIENT_PATIENT_ID: 22aa18af-af51-5799-bc55-367c22c85407
      MY_USER_BWELL_PERSON_ID: 0eb80391-0f61-5ce6-b221-a5428f2f38a7
      MY_USER_BWELL_PATIENT_ID: patient2
    ports:
      - "8080:8080"
    command: ["start-dev", "--import-realm", "--verbose"]
    volumes:
      - ./keycloak-config/realm-import.json:/opt/keycloak/data/import/realm-import.json
