:mod:`spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader`
=========================================================================================

.. py:module:: spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader.FrameworkCsvLoader



.. class:: FrameworkCsvLoader(view: str, path_to_csv: Union[(str, List[str], Path)], delimiter: str = ',', has_header: bool = True, clean_column_names: bool = False, multiline: bool = False, name: Optional[str] = None, parameters: Optional[Dict[str, Any]] = None, progress_logger: Optional[ProgressLogger] = None, **kwargs: Dict[(Any, Any)])


   Bases: :class:`spark_pipeline_framework.transformers.framework_local_file_loader.v1.framework_local_file_loader.FrameworkLocalFileLoader`

   Abstract class for transformers that transform one dataset into another.

   .. versionadded:: 1.3.0

   .. method:: setDelimiter(self, value: pyspark.ml.param.shared.Param) -> spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader.FrameworkCsvLoader


   .. method:: getDelimiter(self) -> str


   .. method:: setHasHeader(self, value: pyspark.ml.param.shared.Param) -> spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader.FrameworkCsvLoader


   .. method:: getHasHeader(self) -> bool


   .. method:: setMultiline(self, value: pyspark.ml.param.shared.Param) -> spark_pipeline_framework.transformers.framework_csv_loader.v1.framework_csv_loader.FrameworkCsvLoader


   .. method:: getMultiline(self) -> bool


   .. method:: getReaderFormat(self) -> str


   .. method:: getReaderOptions(self) -> Dict[(str, Any)]



