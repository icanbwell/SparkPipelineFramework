:py:mod:`spark_pipeline_framework.transformers.framework_kafka_reader.v1.framework_kafka_reader`
================================================================================================

.. py:module:: spark_pipeline_framework.transformers.framework_kafka_reader.v1.framework_kafka_reader


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_pipeline_framework.transformers.framework_kafka_reader.v1.framework_kafka_reader.FrameworkKafkaReader




.. py:class:: FrameworkKafkaReader(kafka_brokers: str, topic: str, schema: pyspark.sql.types.StructType, starting_offset: int = -2, use_ssl: bool = True, previous_checkpoint_view: Optional[str] = None, name: Optional[str] = None, parameters: Optional[Dict[str, Any]] = None, progress_logger: Optional[spark_pipeline_framework.progress_logger.progress_logger.ProgressLogger] = None)

   Bases: :py:obj:`spark_pipeline_framework.transformers.framework_transformer.v1.framework_transformer.FrameworkTransformer`

   Abstract class for transformers that transform one dataset into another.

   .. versionadded:: 1.3.0

   .. py:method:: _transform(self, df: pyspark.sql.DataFrame) -> pyspark.sql.DataFrame

      Transforms the input dataset.

      Parameters
      ----------
      dataset : :py:class:`pyspark.sql.DataFrame`
          input dataset.

      Returns
      -------
      :py:class:`pyspark.sql.DataFrame`
          transformed dataset


   .. py:method:: getKafkaBrokers(self) -> str


   .. py:method:: getTopic(self) -> str


   .. py:method:: getStartingOffset(self) -> int


   .. py:method:: getUseSsl(self) -> bool


   .. py:method:: getSchema(self) -> pyspark.sql.types.StructType


   .. py:method:: getPreviousCheckpointView(self) -> Optional[str]


   .. py:method:: getName(self) -> Optional[str]



